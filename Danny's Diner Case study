/*Introduction
Danny seriously loves Japanese food so in the beginning of 2021, he decides to embark upon a risky venture and opens up a cute little restaurant that sells his 3 favourite foods: sushi, curry and ramen.

Danny’s Diner is in need of your assistance to help the restaurant stay afloat - the restaurant has captured some very basic data from their few months of operation but have no idea how to use their data to help them run the business.

Problem Statement
Danny wants to use the data to answer a few simple questions about his customers, especially about their visiting patterns, how much money they’ve spent and also which menu items are their favourite. Having this deeper connection with his customers will help him deliver a better and more personalised experience for his loyal customers.

He plans on using these insights to help him decide whether he should expand the existing customer loyalty program - additionally he needs help to generate some basic datasets so his team can easily inspect the data without needing to use SQL.

Danny has provided you with a sample of his overall customer data due to privacy issues - but he hopes that these examples are enough for you to write fully functioning SQL queries to help him answer his questions!

Danny has shared with you 3 key datasets for this case study:
Menu
Sales
Members
*/


CREATE DATABASE "Dannys diner"
    WITH 
    OWNER = postgres
    ENCODING = 'UTF8'
    LC_COLLATE = 'English_United Kingdom.1252'
    LC_CTYPE = 'English_United Kingdom.1252'
    TABLESPACE = pg_default
    CONNECTION LIMIT = -1;



CREATE TABLE sales (
  "customer_id" VARCHAR(1),
  "order_date" DATE,
  "product_id" INTEGER
);

INSERT INTO sales
  ("customer_id", "order_date", "product_id")
VALUES
  ('A', '2021-01-01', '1'),
  ('A', '2021-01-01', '2'),
  ('A', '2021-01-07', '2'),
  ('A', '2021-01-10', '3'),
  ('A', '2021-01-11', '3'),
  ('A', '2021-01-11', '3'),
  ('B', '2021-01-01', '2'),
  ('B', '2021-01-02', '2'),
  ('B', '2021-01-04', '1'),
  ('B', '2021-01-11', '1'),
  ('B', '2021-01-16', '3'),
  ('B', '2021-02-01', '3'),
  ('C', '2021-01-01', '3'),
  ('C', '2021-01-01', '3'),
  ('C', '2021-01-07', '3');
 

CREATE TABLE menu (
  "product_id" INTEGER,
  "product_name" VARCHAR(5),
  "price" INTEGER
);

INSERT INTO menu
  ("product_id", "product_name", "price")
VALUES
  ('1', 'sushi', '10'),
  ('2', 'curry', '15'),
  ('3', 'ramen', '12');
  

CREATE TABLE members (
  "customer_id" VARCHAR(1),
  "join_date" DATE
);

INSERT INTO members
  ("customer_id", "join_date")
VALUES
  ('A', '2021-01-07'),
  ('B', '2021-01-09');






/* 1. What is the total amount each customer spent at the restaurant?

*/

SELECT s.customer_id, SUM(price) AS total_sales
FROM sales AS s
JOIN menu AS m
ON s.product_id = m.product_id
GROUP BY customer_id; 

--Customer A spent the most with $76 closely followed by Customer B who spent $74.
--Customer C was much further behind spending only $36

/*  2. How many days has each customer visited the restaurant?

*/

SELECT customer_id, COUNT(DISTINCT(order_date)) AS visitor_frequency
FROM sales
GROUP BY customer_id
order by visitor_frequency desc;

--Customer B is the most frequent visitor with 6 visits followed by Customer A  and then C--


/* 3. What was the first item from the menu purchased by each customer?

*/

WITH ordered_sales_cte AS
(
 SELECT customer_id, order_date, product_name,
  DENSE_RANK() OVER(PARTITION BY s.customer_id
  ORDER BY s.order_date) AS rank
 FROM sales AS s
 JOIN menu AS m
  ON s.product_id = m.product_id
)

SELECT customer_id, product_name
FROM ordered_sales_cte
WHERE rank = 1
GROUP BY customer_id, product_name;

--Customer A's first order is curry and sushi
--Customer B's first order is curry
--Customer C's first order is ramen

/*4. What is the most purchased item on the menu and how many times was it purchased by all customers?
*/


SELECT (COUNT(s.product_id)) AS most_purchased, product_name
FROM sales AS s
JOIN menu AS m
 ON s.product_id = m.product_id
GROUP BY s.product_id, product_name
ORDER BY most_purchased DESC
LIMIT 1;

--The most purcahsed item on the menu is ramen


/* 
5. Which item was the most popular for each customer?
*/

WITH fav_item_cte AS
(
 SELECT s.customer_id, m.product_name, 
  COUNT(m.product_id) AS order_count,
  DENSE_RANK() OVER(PARTITION BY s.customer_id
  ORDER BY COUNT(s.customer_id) DESC) AS rank
FROM menu AS m
JOIN sales AS s
 ON m.product_id = s.product_id
GROUP BY s.customer_id, m.product_name
)

SELECT customer_id, product_name, order_count
FROM fav_item_cte 
WHERE rank = 1;

--Customer A and C's favourite dish is ramen
--Customer B enjoys all the items equally


/* 
6.Which item was purchased first by the customer after they became a member?
*/

WITH member_sales_cte AS 
(
 SELECT s.customer_id, m.join_date, s.order_date,   s.product_id,
         DENSE_RANK() OVER(PARTITION BY s.customer_id
  ORDER BY s.order_date) AS rank
     FROM sales AS s
 JOIN members AS m
  ON s.customer_id = m.customer_id
 WHERE s.order_date >= m.join_date
)

SELECT s.customer_id, s.order_date, m2.product_name 
FROM member_sales_cte AS s
JOIN menu AS m2
 ON s.product_id = m2.product_id
WHERE rank = 1;

--Customer A's first order as a member is curry
--Customer B's first order as a member is sushi
--Remember Customer C is not a member


/* 
7. Which item was purchased just before the customer became a member?
*/
WITH prior_member_purchased_cte AS 
(
 SELECT s.customer_id, m.join_date, s.order_date, s.product_id,
         DENSE_RANK() OVER(PARTITION BY s.customer_id
         ORDER BY s.order_date DESC) AS rank
 FROM sales AS s
 JOIN members AS m
  ON s.customer_id = m.customer_id
 WHERE s.order_date < m.join_date
)

SELECT s.customer_id, s.order_date, m2.product_name 
FROM prior_member_purchased_cte AS s
JOIN menu AS m2
 ON s.product_id = m2.product_id
WHERE rank = 1;

--Customer A's order before they became a member is sushi and curry
--Customer B's order before they became a member is suhi

/* 
8.
What is the total items and amount spent for each member before they became a member?
*/

SELECT s.customer_id, COUNT(DISTINCT s.product_id) AS unique_menu_item, SUM(mm.price) AS total_sales
FROM sales AS s
JOIN members AS m
 ON s.customer_id = m.customer_id
JOIN menu AS mm
 ON s.product_id = mm.product_id
WHERE s.order_date < m.join_date
GROUP BY s.customer_id;

--Customer A spent $25 on 2 items
--Customer B spent $40 on 2 items


/*  
9. If each $1 spent equates to 10 points and sushi has a 2x points multiplier — how many points would each customer have?
*/

WITH price_point_cte AS
 (
 SELECT *, 
 CASE
  WHEN product_id = 1 THEN price * 20
  ELSE price * 10
  END AS points
 FROM menu
 )
 SELECT s.customer_id, SUM(p.points) AS total_points
FROM price_point_cte AS p
JOIN sales AS s
 ON p.product_id = s.product_id
GROUP BY s.customer_id
order by total_points desc;

--Customer B has the most points with 940 closely followed by Customer A with 860 points.
--Customer C is much further behind with 360 points



/*

10. In the first week after a customer joins the program (including their join date) they earn 2x points on all items, not just sushi — how many points do customer A and B have at the end of January?


*/
WITH dates_cte AS 
(
 SELECT *,
     join_date + INTERVAL '6 DAYS'  AS bonus_week, 
   (date_trunc('day','2021-01-31'::date))
 FROM members AS m
)

SELECT  (d.customer_id), s.order_date, d.join_date, 
 d.bonus_week, d.date_trunc, m.product_name, m.price,
 SUM(CASE
  WHEN m.product_name = 'sushi' THEN 2 * 10 * m.price
  WHEN s.order_date BETWEEN d.join_date AND d.bonus_week THEN 2 * 10 * m.price
  ELSE 10 * m.price
  END) AS points
FROM dates_cte AS d
JOIN sales AS s
 ON d.customer_id = s.customer_id
JOIN menu AS m
 ON s.product_id = m.product_id
WHERE s.order_date < d.date_trunc
GROUP BY d.customer_id, s.order_date, d.join_date, d.bonus_week, d.date_trunc, m.product_name, m.price
;


--Customer A has 1,370 points
--Customer B has 820 points--



