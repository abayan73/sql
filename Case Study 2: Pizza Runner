Introduction
Did you know that over 115 million kilograms of pizza is consumed daily worldwide??? (Well according to Wikipedia anyway…)

Danny was scrolling through his Instagram feed when something really caught his eye - “80s Retro Styling and Pizza Is The Future!”

Danny was sold on the idea, but he knew that pizza alone was not going to help him get seed funding to expand his new Pizza Empire - so he had one more genius idea to combine with it - he was going to Uberize it - and so Pizza Runner was launched!

Danny started by recruiting “runners” to deliver fresh pizza from Pizza Runner Headquarters (otherwise known as Danny’s house) and also maxed out his credit card to pay freelance developers to build a mobile app to accept orders from customers.

Available Data
Because Danny had a few years of experience as a data scientist - he was very aware that data collection was going to be critical for his business’ growth.

He has prepared for us an entity relationship diagram of his database design but requires further assistance to clean his data and apply some basic calculations so he can better direct his runners and optimise Pizza Runner’s operations.

All datasets exist within the pizza_runner database schema - be sure to include this reference within your SQL scripts as you start exploring the data and answering the case study questions.


CREATE DATABASE "PIzza_runner"
    WITH 
    OWNER = postgres
    ENCODING = 'UTF8'
    LC_COLLATE = 'English_United Kingdom.1252'
    LC_CTYPE = 'English_United Kingdom.1252'
    TABLESPACE = pg_default
    CONNECTION LIMIT = -1;
	



DROP table runners;
CREATE TABLE runners (
  "runner_id" INTEGER,
  "registration_date" DATE
);
INSERT INTO runners
  ("runner_id", "registration_date")
VALUES
  (1, '2021-01-01'),
  (2, '2021-01-03'),
  (3, '2021-01-08'),
  (4, '2021-01-15');

select * from runner_orders;




--Creating Table 'Customer_orders' and inserting data
-- I am knowingly putting wrong values in and will clean them later on--
drop table customer_orders;
CREATE TABLE customer_orders (
  "order_id" INTEGER,
  "customer_id" INTEGER,
  "pizza_id" INTEGER,
  "exclusions" VARCHAR(4),
  "extras" VARCHAR(4),
  "order_time" TIMESTAMP
);

INSERT INTO customer_orders
  ("order_id", "customer_id", "pizza_id", "exclusions", "extras", "order_time")
VALUES
  ('1', '101', '1', '', '', '2020-01-01 18:05:02'),
  ('2', '101', '1', '', '', '2020-01-01 19:00:52'),
  ('3', '102', '1', '', '', '2020-01-02 23:51:23'),
  ('3', '102', '2', '', NULL, '2020-01-02 23:51:23'),
  ('4', '103', '1', '4', '', '2020-01-04 13:23:46'),
  ('4', '103', '1', '4', '', '2020-01-04 13:23:46'),
  ('4', '103', '2', '4', '', '2020-01-04 13:23:46'),
  ('5', '104', '1', 'null', '1', '2020-01-08 21:00:29'),
  ('6', '101', '2', 'null', 'null', '2020-01-08 21:03:13'),
  ('7', '105', '2', 'null', '1', '2020-01-08 21:20:29'),
  ('8', '102', '1', 'null', 'null', '2020-01-09 23:54:33'),
  ('9', '103', '1', '4', '1, 5', '2020-01-10 11:22:59'),
  ('10', '104', '1', 'null', 'null', '2020-01-11 18:34:49'),
  ('10', '104', '1', '2, 6', '1, 4', '2020-01-11 18:34:49');
 
 
--creating runner_orders table and inserting data-- 
drop table runner_orders;
CREATE TABLE runner_orders (
  "order_id" INTEGER,
  "runner_id" INTEGER,
  "pickup_time" date,
  "distance" VARCHAR(7),
  "duration" VARCHAR(10),
  "cancellation" VARCHAR(23)
);

INSERT INTO runner_orders
  ("order_id", "runner_id", "pickup_time", "distance", "duration", "cancellation")
VALUES
  ('1', '1', '2020-01-01 18:15:34', '20km', '32 minutes', ''),
  ('2', '1', '2020-01-01 19:10:54', '20km', '27 minutes', ''),
  ('3', '1', '2020-01-03 00:12:37', '13.4km', '20 mins', NULL),
  ('4', '2', '2020-01-04 13:53:03', '23.4', '40', NULL),
  ('5', '3', '2020-01-08 21:10:57', '10', '15', NULL),
  ('6', '3', NULL, 'null', 'null', 'Restaurant Cancellation'),
  ('7', '2', '2020-01-08 21:30:45', '25km', '25mins', 'null'),
  ('8', '2', '2020-01-10 00:15:02', '23.4 km', '15 minute', 'null'),
  ('9', '2', NULL, 'null', 'null', 'Customer Cancellation'),
  ('10', '1', '2020-01-11 18:50:20', '10km', '10minutes', 'null');
  

--creating pizza name table and inserting data--
drop table pizza_names;
CREATE TABLE pizza_names (
  "pizza_id" INTEGER,
  "pizza_name" TEXT
);
INSERT INTO pizza_names
  ("pizza_id", "pizza_name")
VALUES
  (1, 'Meatlovers'),
  (2, 'Vegetarian');

-- creatint pizza recipes table and inserting data--
drop table pizza_recipes;
CREATE TABLE pizza_recipes (
  "pizza_id" INTEGER,
  "toppings" TEXT
);
INSERT INTO pizza_recipes
  ("pizza_id", "toppings")
VALUES
  (1, '1, 2, 3, 4, 5, 6, 8, 10'),
  (2, '4, 6, 7, 9, 11, 12');



--creating table pizza toppings and insert data--
drop table pizza_toppings;
CREATE TABLE pizza_toppings (
  "topping_id" INTEGER,
  "topping_name" TEXT
);
INSERT INTO pizza_toppings
  ("topping_id", "topping_name")
VALUES
  (1, 'Bacon'),
  (2, 'BBQ Sauce'),
  (3, 'Beef'),
  (4, 'Cheese'),
  (5, 'Chicken'),
  (6, 'Mushrooms'),
  (7, 'Onions'),
  (8, 'Pepperoni'),
  (9, 'Peppers'),
  (10, 'Salami'),
  (11, 'Tomatoes'),
  (12, 'Tomato Sauce');
  
  
 --removing errors on multipe tables--

-- within this table, there are glaring errors particularly in the exclusions and extras columns--
-- specifcally on the null values

select * from runner_orders;

Update runner_orders

SET pickup_time = CASE pickup_time
WHEN 'null' THEN ''
ELSE pickup_time
END;


--Updating runner order table, distance column--
Update runner_orders
set distance = case
WHEN distance like '%km' THEN TRIM ('km' from distance)
WHEN distance like 'null' THEN NULL
ELSE distance 
END;
ALTER TABLE runner_orders
ALTER COLUMN distance TYPE NUMERIC USING distance:: NUMERIC;

Update runner_orders
set distance = CASE
WHEN distance is NULL THEN 0
ELSE distance
END

--Updating duration column--

Update runner_orders
set duration = case
when duration Like 'null' THEN NULL
when duration like '%mins' THEN TRIM('mins'from duration)
when duration like '%minute' THEN TRIM ('minute' from duration)
when duration like '%minutes' THEN TRIM('minutes' from duration)
ELSE  duration
END;

alter table runner_orders
alter column duration TYPE INT USING duration :: INT;

Update runner_orders
set duration = CASE
WHEN duration is NULL THEN 0
ELSE duration
END

--Updating cancellation column--
update runner_orders
set cancellation = case
when cancellation like '' THEN NULL
when cancellation like 'null' THEN NULL
when cancellation is NULL THEN ''
ELSE cancellation
END;

select * from runner_orders;


--Updating Customers Table--

select * from customer_orders;


update customer_orders
set exclusions = case
when exclusions LIKE 'null' THEN ''
ELSE exclusions
END;
update customer_orders
set extras = case
when extras is NULL THEN ''
when extras LIKE 'null' then ''
ELSE extras
END;


--As of now the data has been cleaned and approriate data types have been incorporated--


-- Section A : Pizza metrics--

/* 
1. How many pizzas were ordered?
*/

select count(order_id) AS pizza_order_count
from customer_orders;

--There were 14 pizzas ordered--


/*
2. How many unique customer orders were made?
*/

SELECT COUNT(DISTINCT order_id) AS number_of_unique_orders
FROM customer_orders;

--There were 10 unique customer orders made--


/*
3. How many successful orders were delivered by each runner
*/


select COUNT(order_id) as succesful_orders,runner_id
from runner_orders
where duration>0
group by runner_id
order by succesful_orders desc;

/*
Runner 1 has the most succesful orders with 4
Runner 2 closely follows with 3
and Runner 3 is last with one order

*/

/*
4 How many of each type of pizza was delivered
*/

select * from customer_orders;

select p.pizza_name, COUNT(c.pizza_id) as pizzas_delivered
from customer_orders c
join runner_orders r
on c.order_id = r.order_id
join pizza_names as p
on c.pizza_id=p.pizza_id
where r.distance>0
group by p.pizza_name;


/*
There werre 9 Meatlovers Pizzas and 3 vegetarian pizza delivered
*/

/*
5. How many Vegetarian and Meatlovers were ordered by each customer?
*/

select * from pizza_names;
select * from customer_orders;


select c.customer_id,p.pizza_name, count(p.pizza_name) as ordered_pizzas
from customer_orders c
join pizza_names p
on c.pizza_id=p.pizza_id
group by p.pizza_name,c.customer_id
order by c.customer_id;

/*

Customer 101 ordered 2 meatlovers pizzas and 1 Vegetarian pizza
Customer 102 ordered 2 meatlovers pizza and 1 vegetarian pizza
Customer 103 ordered 3 meatlovers pizza and 1 vegetarian pizza
Customer 104 ordered 3 meatlovers pizza
Customer 105 ordered 1 Veggie pizza

*/

/*
6. What was the maximum number of pizzas delivered in a single order?
*/
select * from customer_orders;
select * from runner_orders;

select c.customer_id,count(c.pizza_id) as pizzas_delivered
from customer_orders c
join runner_orders r
on c.order_id=r.order_id
where r.distance>0
group by c.customer_id
order by pizzas_delivered desc
;
a|Q1\

/*
3 pizzas was the most  in a single order by Customers 102,104,103
*/

/*
Another solution to this problem isb using with statement--


*/


with pizza_orders_cte as 
(
	Select c.customer_id, COUNT(c.pizza_id) as pizza_per_order
	from customer_orders as c
	Join runner_orders as r
	on c.order_id = r.order_id
	where r.distance>0
	group by c.customer_id
)

Select customer_id,max(pizza_per_order) as pizza_count
from pizza_orders_cte
group by pizza_orders_cte.customer_id
order by pizza_count;



/* 
7.For each customer, how many delivered pizzas had at 
least 1 change and how many had no changes?
*/


select c.customer_id,
	SUM(CASE
		WHEN c.exclusions <> '' or c.extras <> '' THEN 1
		ELSE 0
		END) AS  at_least_1_change,
	SUM(CASE
	    WHEN c.exclusions='' AND c.extras='' THEN 1	
	    ELSE 0
	   	END) AS no_change
	from customer_orders as c
	join runner_orders as r
	on c.order_id = r.order_id
	where r.distance>0
	group by c.customer_id
	order by c.customer_id;
/*

--Customer 101 and 102 had no changes on any pizzas they ordered
--Customer 103,104,105 had at least one change on their pizza
*/



/*
8. How many pizzas were delivered that had both exclusions and extras?

*/

select count(c.pizza_id) as number_of_pizzas,
	CASE
	WHEN c.exclusions <> '' and c.extras <> ''
	THEN 'Both exclusions and extras'
	ELSE 'N/a'
	END as pizzas_with_exclusions_and_extras
from customer_orders c
join runner_orders as r
on c.order_id =r.order_id
where r.distance>0
AND exclusions <>''
and extras <> ''
group by c.exclusions,c.extras
order by number_of_pizzas;

/*
--Only one pizza was delivered with exclusions and extras

There is also another solution, that is arguably more neater:
*/

select
	SUM(CASE
		WHEN c.exclusions <> ''  and  c.extras <> ''
		THEN 1
		ELSE 0
	    END) as The_numer_of_pizzas_with_both_exclusions_and_extras
	from customer_orders c
	join runner_orders as r
	on c.order_id=r.order_id
	where r.distance>0;



/*
9.What was the total volume of pizzas ordered for each hour of the day?
*/

select count(c.order_id) as volume_of_pizzas,EXTRACT (hour from c.order_time) as hour_of_order
from customer_orders c
group by hour_of_order
order by volume_of_pizzas desc;

/*
The largest orders placed were at 6,9 &11 pm.
*/


/*
10.What was the volume of orders for each day of the week?
*/

select to_char(c.order_time,'Day') as day, count(c.order_id) as volume_of_pizzas
from customer_orders c
group by day
order by volume_of_pizzas desc;


/*
Saturday and Wednesday are the most popular days to order pizza
*/


Section B: Runners and Customer Experience


/* 
How many runners signed up for each 1 week period? (i.e. week starts 2021-01-01)

*/

select * from runners;

select extract (week from registration_date) as week_number, 
count(runner_id) as runner_signup
from runners 
group by week_number;

/*

So there were 2 signups in the first week
followed by one signup each week for the next two weeks

*/


/* 
What was the average time in minutes it took for each runner to arrive at the Pizza Runner HQ to pickup the order?*/

select * from runner_orders;

With time_taken_cte as
(
select r.order_id,(EXTRACT(EPOCH FROM (r.pickup_time-c.order_time))/60) as pickup_minutes
from runner_orders r
join customer_orders c 
on r.order_id=c.order_id
where r.order_id=c.order_id
and r.duration >0
group by r.order_id,r.pickup_time,c.order_time
)

select avg(pickup_minutes)::numeric(3,1) as avg_pickup_minutes 
from time_taken_cte;

--Time taken rounds to 16 minutes--


--we need to check the null values of the table--


/*
3. Is there any relationship between the number of pizzas and how long the order takes to prepare?
*/

With prep_time_taken_cte
as
(
SELECT c.order_id, count(c.pizza_id) as pizza_order,EXTRAct(EPOCH FROM (r.pickup_time-c.order_time)/60) as prep_time_minutes
from runner_orders r
join customer_orders c 
on r.order_id=c.order_id
where r.order_id=c.order_id
and r.duration>0
group by c.order_id,r.pickup_time,c.order_time
)


select  ROUND(AVG(prep_time_minutes)::INT ,0) as avg_prep_time_minutes,pizza_order
from prep_time_taken_cte
group by pizza_order
order by pizza_order desc;

/*
So for orders of 3 pizzas it takes 29 minutes
for orders of 2 pizzas it takes 18 minutes
for orders of 1 pizza it takes 12 minutes

Therefore orders of 2 pizzas have the quickest prep time per pizza

*/

/* 
4. What was the average distance travelled for each customer?

*/


select c.customer_id, CAST(AVG(r.distance) as numeric(3,1)) as avg_dist_km
from runner_orders r
join customer_orders c
on r.order_id=c.order_id
where r.distance>0
group by c.customer_id
order by avg_dist_km desc;

/*
Customer 105 is the furthest from Pizza HQ at 25Km
while  Customer 104 is the closest at 10km
*/


/*
5. What was the difference between the longest and shortest delivery times for all orders?
*/



select (max(duration) - min(duration)) as delivery_time_difference
from runner_orders
where duration>0

-- We can use the duration column to find the difference between Max and Min delivery times
-- the delivery difference is 30 minutes

/* 
6. What was the average speed for each runner for each 
delivery and do you notice any trend for these values?
			
*/

select r.runner_id,
round((r.distance/r.duration*60),2) as avg_speed
from runner_orders r
join customer_orders c
on r.order_id=c.order_id
where r.distance>0
group by r.runner_id,c.customer_id,r.distance,r.duration
order by r.runner_id;

/*

Runner 1 average speed is in the range of 37.5km/h to 60km/h
Runner 2 average speed is betwen 35 km/h to 93 km/h which is odd. 93 km/h is alarmingly high, so maybe it is worth investigating
Runner 3 averages 40km/h

*/

/*

7. What is the successful delivery percentage for each runner?
*/

SELECT runner_id, 
ROUND(100 * SUM
  (CASE WHEN distance = 0 THEN 0
  ELSE 1
  END) / COUNT(*), 2) AS successful_delivery_percentage
FROM runner_orders
GROUP BY runner_id
order by successful_delivery_percentage desc;

/*
Runner 1 has a 100% success rate, followed by Runner 2 with 75% and lastly runner 3 with 50%
*/

select * from runner_orders;
